# -*- coding: utf-8 -*-
"""lg aimers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1soC_Ao3BzC1JQ8-hmKC3LOGSQQhLsHkp
"""

from google.colab import drive
drive.mount('/content/drive')

"""<h2>Import</h2>"""

import pandas as pd
import numpy as np

from sklearn.preprocessing import  OrdinalEncoder
from sklearn.ensemble import ExtraTreesClassifier

"""<h2>Data Load</h2>"""

train = pd.read_csv('/content/drive/MyDrive/lg aimers/train.csv').drop(columns=['ID'])
test = pd.read_csv('/content/drive/MyDrive/lg aimers/test.csv').drop(columns=['ID'])

X = train.drop('임신 성공 여부', axis=1)
y = train['임신 성공 여부']

nan_info = X.isna().sum()
nan_info = nan_info[nan_info > 0]  # NaN이 있는 컬럼만 필터링
print(nan_info)

"""<h2>Data Pre-processing</h2>"""

categorical_columns = [
    "시술 시기 코드",
    "시술 당시 나이",
    "시술 유형",
    "특정 시술 유형",
    "배란 자극 여부",
    "배란 유도 유형",
    "단일 배아 이식 여부",
    "착상 전 유전 검사 사용 여부",
    "착상 전 유전 진단 사용 여부",
    "남성 주 불임 원인",
    "남성 부 불임 원인",
    "여성 주 불임 원인",
    "여성 부 불임 원인",
    "부부 주 불임 원인",
    "부부 부 불임 원인",
    "불명확 불임 원인",
    "불임 원인 - 난관 질환",
    "불임 원인 - 남성 요인",
    "불임 원인 - 배란 장애",
    "불임 원인 - 여성 요인",
    "불임 원인 - 자궁경부 문제",
    "불임 원인 - 자궁내막증",
    "불임 원인 - 정자 농도",
    "불임 원인 - 정자 면역학적 요인",
    "불임 원인 - 정자 운동성",
    "불임 원인 - 정자 형태",
    "배아 생성 주요 이유",
    "총 시술 횟수",
    "클리닉 내 총 시술 횟수",
    "IVF 시술 횟수",
    "DI 시술 횟수",
    "총 임신 횟수",
    "IVF 임신 횟수",
    "DI 임신 횟수",
    "총 출산 횟수",
    "IVF 출산 횟수",
    "DI 출산 횟수",
    "난자 출처",
    "정자 출처",
    "난자 기증자 나이",
    "정자 기증자 나이",
    "동결 배아 사용 여부",
    "신선 배아 사용 여부",
    "기증 배아 사용 여부",
    "대리모 여부",
    "PGD 시술 여부",
    "PGS 시술 여부"
]

# 카테고리형 컬럼들을 문자열로 변환
for col in categorical_columns:
    X[col] = X[col].astype(str)
    test[col] = test[col].astype(str)

from sklearn.preprocessing import OrdinalEncoder

# 모든 범주형 변수의 정렬된 카테고리 목록 생성
sorted_categories = [sorted(X[col].astype(str).unique()) for col in categorical_columns]

# OrdinalEncoder를 생성하면서 정렬된 카테고리 적용
ordinal_encoder = OrdinalEncoder(categories=sorted_categories, handle_unknown='use_encoded_value', unknown_value=-1)

# 변환 적용
X_train_encoded = X.copy()
X_train_encoded[categorical_columns] = ordinal_encoder.fit_transform(X[categorical_columns])

X_test_encoded = test.copy()
X_test_encoded[categorical_columns] = ordinal_encoder.transform(test[categorical_columns])

sorted_categories

numeric_columns = [
    "임신 시도 또는 마지막 임신 경과 연수",
    "총 생성 배아 수",
    "미세주입된 난자 수",
    "미세주입에서 생성된 배아 수",
    "이식된 배아 수",
    "미세주입 배아 이식 수",
    "저장된 배아 수",
    "미세주입 후 저장된 배아 수",
    "해동된 배아 수",
    "해동 난자 수",
    "수집된 신선 난자 수",
    "저장된 신선 난자 수",
    "혼합된 난자 수",
    "파트너 정자와 혼합된 난자 수",
    "기증자 정자와 혼합된 난자 수",
    "난자 채취 경과일",
    "난자 해동 경과일",
    "난자 혼합 경과일",
    "배아 이식 경과일",
    "배아 해동 경과일"
]

"""<h2>X_train_encoded와 y와의 속성 연관도</h2>"""

# X_train_encoded에 y 값 추가
data = X_train_encoded.copy()
data['y'] = y

# 속성별 0과 1 비율 분석
for col in X_train_encoded.columns:
    print(f"--- {col} 속성 분석 ---")

    # 각 속성 값별로 y=0과 y=1 개수 계산
    value_counts = data.groupby(col)['y'].value_counts().unstack().fillna(0)
    value_counts.columns = ['y_0', 'y_1']

    # 0과 1의 비율 추가
    value_counts['total'] = value_counts['y_0'] + value_counts['y_1']
    value_counts['y_0_ratio'] = value_counts['y_0'] / value_counts['total']
    value_counts['y_1_ratio'] = value_counts['y_1'] / value_counts['total']

    # 100% y=0만 있는 값 찾기
    y_0_only = value_counts[value_counts['y_1'] == 0].index.tolist()

    # 100% y=1만 있는 값 찾기
    y_1_only = value_counts[value_counts['y_0'] == 0].index.tolist()

    # y=0이 더 많은 범위
    y_0_more = value_counts[value_counts['y_0_ratio'] > 0.5].index.tolist()

    # y=1이 더 많은 범위
    y_1_more = value_counts[value_counts['y_1_ratio'] > 0.5].index.tolist()

    print(f"✅ 100% y=0 값: {y_0_only}")
    print(f"✅ 100% y=1 값: {y_1_only}")
    print(f"✅ y=0이 더 많은 값: {y_0_more}")
    print(f"✅ y=1이 더 많은 값: {y_1_more}")
    print()

"""<h2>Train</h2>"""

model = ExtraTreesClassifier(random_state=42)

model.fit(X_train_encoded, y)

"""<h2>Predict</h2>"""

pred_proba = model.predict_proba(X_test_encoded)[:, 1]

"""<h2>Submission</h2>"""

sample_submission = pd.read_csv('/content/drive/MyDrive/lg aimers/sample_submission.csv')
sample_submission['probability'] = pred_proba

sample_submission.to_csv('./baseline_submit.csv', index=False)